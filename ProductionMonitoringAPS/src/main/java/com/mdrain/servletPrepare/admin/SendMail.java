package com.mdrain.servletPrepare.admin;

import java.util.Properties;
import java.io.File;
import java.io.IOException;
import javax.servlet.ServletException;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.internet.MimeUtility;

public class SendMail {

	public static void bootstrap(String massasgeSubject, String massageBody, String[] recipients)
			throws ServletException, IOException {

		String[] to = recipients;
		String from = "p.marchovski@mdrain.eu";
		String host = "mail.mdrain.eu";

		final String username = "p.marchovski@mdrain.eu";// username generated by Mailtrap
		final String password = "pe1pe2tar81";// password generated by Mailtrap

		Properties prop = new Properties();
		prop.put("mail.smtp.auth", "true");
		prop.put("mail.smtp.starttls.enable", "true");
		prop.put("mail.smtp.host", host);
		prop.put("mail.smtp.port", "2525");
		prop.put("mail.user", username);
		prop.put("mail.smtp.ssl.trust", host);

		// Get the Session object.
		Session session = Session.getInstance(prop, new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(username, password);
			}
		});

		for (int i = 0; i < to.length; i++) {

			try {
				// Create a default MimeMessage object.
				MimeMessage message = new MimeMessage(session);

				// Set From: header field
				message.setFrom(new InternetAddress(from));

				// Set To: header field
				message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to[i]));

				// Set Subject: header field
				message.setSubject(MimeUtility.encodeText(massasgeSubject, "utf-8", "B"));

				// Put the content of your message
				message.setText(massageBody, "utf-8");

				// Send message
				Transport.send(message);

			} catch (MessagingException e) {
				throw new RuntimeException(e);
			}

		}
	}

	public static void bootstrapAttahment(String massasgeSubject, String massageBody, String[] recipients,
			String attachment) throws ServletException, IOException {

		String[] to = recipients;
		String from = "p.marchovski@mdrain.eu";
		String host = "mail.mdrain.eu";

		final String USER_NAME = "p.marchovski@mdrain.eu";// username generated by Mailtrap
		final String PASSWORD = "pe1pe2tar81";// password generated by Mailtrap

		Properties prop = new Properties();
		prop.put("mail.smtp.auth", "true");
		prop.put("mail.smtp.starttls.enable", "true");
		prop.put("mail.smtp.host", host);
		prop.put("mail.smtp.port", "2525");
		prop.put("mail.user", USER_NAME);
		prop.put("mail.smtp.ssl.trust", host);

		// Get the Session object.
		Session session = Session.getInstance(prop, new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(USER_NAME, PASSWORD);
			}
		});

		for (int i = 0; i < to.length; i++) {

			try {
				// Create a default MimeMessage object.
				MimeMessage message = new MimeMessage(session);

				// Set From: header field
				message.setFrom(new InternetAddress(from));

				// Set To: header field
				message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to[i]));

				// Set Subject: header field
				message.setSubject(MimeUtility.encodeText(massasgeSubject, "utf-8", "B"));

				MimeBodyPart massageBodyPart = new MimeBodyPart();
				massageBodyPart.setText(massageBody, "utf-8");

				MimeBodyPart attachmentPart = new MimeBodyPart();
				attachmentPart.attachFile(new File(attachment));

				Multipart multipart = new MimeMultipart();
				multipart.addBodyPart(massageBodyPart);
				multipart.addBodyPart(attachmentPart);

				message.setContent(multipart);

				// Send message
				Transport.send(message);

			} catch (MessagingException e) {
				throw new RuntimeException(e);
			}
		}
	}
}
